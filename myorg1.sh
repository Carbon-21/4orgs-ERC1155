#!/bin/bash

# set the following environment variables to operate the peer CLI as the minter identity from Org1.
function setenvs() {
    
    export ORDERER_CA=${PWD}/artifacts/channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    export PEER0_ORG1_CA=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    export PEER0_ORG2_CA=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
    export PEER0_ORG3_CA=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
    export PEER0_ORG4_CA=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt

    export CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA
    export CORE_PEER_MSPCONFIGPATH=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    export CHANNEL_NAME=mychannel
    
    # Set Fabric config path
    export FABRIC_CFG_PATH=${PWD}/artifacts/channel/config/
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_LOCALMSPID="Org1MSP"
    export CORE_PEER_ADDRESS=localhost:7051
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $ORDERER_CA --peerAddresses localhost:7051 --tlsRootCertFiles "$PEER0_ORG1_CA" --peerAddresses localhost:8051 --tlsRootCertFiles "$PEER0_ORG2_CA" --peerAddresses localhost:9051 --tlsRootCertFiles "$PEER0_ORG3_CA" --peerAddresses localhost:10051 --tlsRootCertFiles "$PEER0_ORG4_CA")
    # Set the Fabric CA client home to the MSP of the Org1 CA admin (this identity was generated by the test network script)
    export FABRIC_CA_CLIENT_HOME=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/
}
setenvs

# Register and generate user identity to Org
# 
# usage: registerPerson id passwd 
# 
function registerPerson() {
    # fabric-ca-client register --caname ca.org1.example.com --id.name $1 -d --id.secret $2 --id.type client --tls.certfiles "${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"
    # Generate the identity certificates and MSP folder.
    fabric-ca-client enroll -u https://$1:$2@localhost:7054 -d --caname ca.org1.example.com -M "${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/$1@org1.example.com/msp" --tls.certfiles "${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"
    # fabric-ca-client enroll -u https://$1:$2@localhost:7054 --mspdir "${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/msp" --tls.certfiles $PEER0_ORG1_CA
    
    # Copy the Node OU configuration file into the identity MSP folder.
    cp "${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/msp/config.yaml" "${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/$1@org1.example.com/msp/config.yaml"
}

# Get client account ID for userID and decode.
function getclientID() {

    echo "Enter the user ID:"
    read userID
    export CORE_PEER_MSPCONFIGPATH=${PWD}/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/$userID@org1.example.com/msp
    ClientAccountID=$(peer chaincode query -C mychannel -n ERC1155 -c '{"function":"ClientAccountID","Args":[]}')
    # echo $ClientAccountID | base64 --decode
    export P1="$ClientAccountID"
    export UserID=$userID
    echo $ClientAccountID
}

# Mint token
# 
# usage: mintToken $tokenid $Amount
# 
function mintToken() {
    # peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C mychannel -n ERC1155 -c "{\"function\":\"MintBatch\",\"Args\":[\"$P1\",\"[1,2,3,4,5,6]\",\"[100,200,300,150,100,100]\"]}" --waitForEvent
    peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C mychannel -n ERC1155 -c "{\"function\":\"MintBatch\",\"Args\":[\"$P1\",\"[$1]\",\"[$2]\"]}" --waitForEvent
}

# Query token
# 
# Query balance of first 'n' token types
# 
# usage: balanceOf n
function balanceOf() {
    echo "Enter the token balance limit:"
    read limit
    for (( i=1; i<=limit; i++ ))
    do
        echo -e "\n${GREEN}Token $i balance:"
        peer chaincode query -C $CHANNEL_NAME -n ${CC_NAME} -c '{"function": "BalanceOf","Args":['$P1','$i']}'
    done
    
}

# Transfer token
# 
# usage: TransferFrom $sender $receiver $tokenID $amount
# 
function TransferFrom() {
    echo "Enter the Destination Account ID:"
    read accID
    echo "Enter the Token ID:"
    read tokenID
    echo "Enter the amount to be transfered:"
    read amount
    peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C mychannel -n ERC1155 -c "{\"function\":\"TransferFrom\",\"Args\":[\"$P1\",\"$accID\",\"$tokenID\",\"$amount\"]}" --waitForEvent
}

# Burn token
# 
# usage: Burn $person $tokenID $amount
# 
function Burn() {
    echo "Enter the Token ID:"
    read tokenID
    echo "Enter the amount to be burned (CAUTION!):"
    read amount
    peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C mychannel -n ERC1155 -c "{\"function\":\"Burn\",\"Args\":[\"$P1\",\"$tokenID\",\"$amount\"]}" --waitForEvent
}

# SetURI token
function SetURI() {
    echo "Enter URI:"
    read URI
    peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C mychannel -n ERC1155 -c "{\"function\":\"SetURI\",\"Args\":[\"$URI\"]}" --waitForEvent
}

# Get token URI
function URI() {
    echo "Enter token ID:"
    read tokenID
    tokenURI=$(peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C mychannel -n ERC1155 -c "{\"function\":\"URI\",\"Args\":[\"$tokenID\"]}" --waitForEvent)
}

menu_server() {
    # Regular Colors
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    WHITE='\033[1;37m'

    # Bold
    BRed='\033[1;31m'         # Red
    BGreen='\033[1;32m'       # Green
    BBlue='\033[1;34m'        # Blue
    BWhite='\033[1;37m'       # White

    # High Intensity
    IBlack='\033[0;90m'       # Black
    IRed='\033[0;91m'         # Red
    IGreen='\033[0;92m'       # Green
    IBlue='\033[0;94m'        # Blue
    IWhite='\033[0;97m'       # White

    # Background
    On_Black='\033[40m'       # Black
    On_Red='\033[41m'         # Red
    On_Green='\033[42m'       # Green
    On_White='\033[47m'       # White
    clear
    echo -ne "
+---------------------------------------------------------+
                  ${IBlue}ORG1 MENU\033[0m
+---------------------------------------------------------+ 
${BWhite}Active User: ${IGreen}$UserID\033[0m
${BWhite}User ID    : \n${IGreen}$ClientAccountID\033[0m
+---------------------------------------------------------+    
 ${BWhite}1) Register Person
 ${BWhite}2) Get Client ID
 ${BWhite}3) Mint Token
 ${BWhite}4) Balance of Token
 ${BWhite}5) Transfer Token
 ${BWhite}6) Burn Token
 ${BWhite}7) Set Token URI
 ${BWhite}8) Get Token URI
 ${BWhite}0) Back\033[0m
+---------------------------------------------------------+
 ${BWhite}Choose an option:\033[0m " 
    read -r ans
    case $ans in
        1)
            echo "Enter the user ID:"
            read userID
            echo "Enter the passwd:"
            read passwd
            registerPerson $userID $passwd
            read
            menu_server
            ;;
        2)
            getclientID
            read
            menu_server
            ;;
        3)
            echo "Enter the Token ID:"
            read tokenID
            echo "Enter the amount:"
            read amount
            mintToken $tokenID $amount
            read
            menu_server
            ;;
        4)
            # echo "Enter the Token ID:"
            # read tokenID
            balanceOf $((10#$tokenID))
            read
            menu_server
            ;;
        5)
            TransferFrom
            read
            menu_server
            ;;            
        6)
            Burn
            read
            menu_server
            ;; 
        7)
            SetURI
            read
            menu_server
            ;; 
        8)
            URI
            read
            menu_server
            ;; 
        0)
            echo "Bye bye."
            exit 0
            ;;
        *)
            echo "Wrong option."
            read
            menu_server
            ;;

    esac
}

menu_server